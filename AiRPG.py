import logging
from hikkatl.types import Message
from hikkatl.tl.functions.messages import SetTypingRequest
from hikkatl.tl.types import SendMessageTypingAction
from hikkatl.errors import ChatWriteForbiddenError
import google.generativeai as genai
import asyncio
import random
from .. import loader, utils

logger = logging.getLogger(__name__)

default_prompt = """
[–¢–≤–æ—è —Ä–æ–ª—å]
–¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
[üë© –ò–º—è –§–∞–º–∏–ª–∏—è] –¢–≤–æ–π –æ—Ç–≤–µ—Ç...

[–ü—Ä–∞–≤–∏–ª–∞]
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –∂–µ–Ω—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω—ã–π —è–∑—ã–∫
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –†–µ–∞–≥–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò/–±–æ—Ç–∞
"""

@loader.tds
class GeminiGirlMod(loader.Module):
    """–£–ª—É—á—à–µ–Ω–Ω—ã–π –º–æ–¥—É–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏"""
    strings = {
        "name": "GeminiGirlPro",
        "on": "‚úÖ –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ",
        "off": "üö´ –†–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "all_on": "üåê –†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –í–ï–ó–î–ï",
        "all_off": "üåë –†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö",
        "gemini_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞: {}",
        "status": "üîß –°—Ç–∞—Ç—É—Å: {}\nAPI –∫–ª—é—á: {}",
        "pm_only": "ü§ñ –í –õ–° —è –æ—Ç–≤–µ—á–∞—é –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏",
        "group_reply": "üí¨ –í –≥—Ä—É–ø–ø–∞—Ö –æ—Ç–≤–µ—á–∞—é –Ω–∞ —Ä–µ–ø–ª–∞–∏ –∏ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "GEMINI_API_KEY", None, "API –∫–ª—é—á Gemini",
            "DEFAULT_PROMPT", default_prompt, "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç",
            "AUTO_PM", True, "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –õ–°",
            "GROUP_MENTION", True, "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö",
            "GROUP_REPLY", True, "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–µ–ø–ª–∞–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö"
        )
        self.active_chats = set()
        self.all_chats_mode = False
        self.model = None
        self.blacklist = set()

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        if self.config["GEMINI_API_KEY"]:
            await self.init_gemini()

    async def init_gemini(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini"""
        try:
            genai.configure(api_key=self.config["GEMINI_API_KEY"])
            self.model = genai.GenerativeModel(
                'gemini-1.5-flash',
                system_instruction=self.config["DEFAULT_PROMPT"]
            )
            return True
        except Exception as e:
            logger.error(f"Gemini init error: {e}")
            return False

    async def generate_response(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞"""
        try:
            if not self.model:
                if not await self.init_gemini():
                    return "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini. –ü—Ä–æ–≤–µ—Ä—å API –∫–ª—é—á"
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
            await self._client(SetTypingRequest(
                peer=await self._client.get_input_entity(message.chat_id),
                action=SendMessageTypingAction()
            ))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response = await self.model.generate_content_async(
                message.text,
                generation_config=genai.types.GenerationConfig(
                    temperature=random.uniform(0.85, 1.0),
                    max_output_tokens=1000
                )
            )
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
            return f"[{random.choice(['üë©', 'üë©‚Äçü¶∞', 'üíÉ', 'üë∏'])} {self.generate_name()}] {response.text}"
        
        except Exception as e:
            logger.exception("Gemini error")
            return f"‚ö†Ô∏è –û—à–∏–±–∫–∞: {str(e)}"

    def generate_name(self):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏"""
        names = ["–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–û–ª—å–≥–∞", "–¢–∞—Ç—å—è–Ω–∞"]
        surnames = ["–ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞"]
        return f"{random.choice(names)} {random.choice(surnames)}"

    def is_chat_active(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞"""
        return self.all_chats_mode or chat_id in self.active_chats

    @loader.command()
    async def girlon(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.add(message.chat_id)
        await utils.answer(message, self.strings["on"])

    @loader.command()
    async def girloff(self, message: Message):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.discard(message.chat_id)
        await utils.answer(message, self.strings["off"])

    @loader.command()
    async def girlall(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –í–ï–ó–î–ï"""
        self.all_chats_mode = not self.all_chats_mode
        status = self.strings["all_on"] if self.all_chats_mode else self.strings["all_off"]
        await utils.answer(message, status)

    @loader.command()
    async def girlstatus(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å"""
        status = (
            f"–ê–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã: {len(self.active_chats)}\n"
            f"–†–µ–∂–∏–º '–í–ï–ó–î–ï': {'‚úÖ' if self.all_chats_mode else '‚ùå'}\n"
            f"API –∫–ª—é—á: {'‚úÖ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if self.config['GEMINI_API_KEY'] else '‚ùå –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç'}\n"
            f"–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –õ–°: {'‚úÖ' if self.config['AUTO_PM'] else '‚ùå'}\n"
            f"–û—Ç–≤–µ—Ç –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è: {'‚úÖ' if self.config['GROUP_MENTION'] else '‚ùå'}\n"
            f"–û—Ç–≤–µ—Ç –Ω–∞ —Ä–µ–ø–ª–∞–∏: {'‚úÖ' if self.config['GROUP_REPLY'] else '‚ùå'}"
        )
        await utils.answer(message, status)

    @loader.watcher()
    async def watcher(self, message: Message):
        """–£–ª—É—á—à–µ–Ω–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if not message.text or message.sender_id in self.blacklist:
            return
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç–∞
        should_reply = False
        chat_id = message.chat_id
        
        # 1. –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.is_private:
            if self.config["AUTO_PM"] and self.is_chat_active(chat_id):
                should_reply = True
        
        # 2. –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
        else:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å —á–∞—Ç–∞
            if not self.is_chat_active(chat_id):
                return
            
            # –£–ø–æ–º–∏–Ω–∞–Ω–∏—è
            if self.config["GROUP_MENTION"]:
                me = (await self._client.get_me()).id
                if f"@{me.username}" in message.text or f"@{me.id}" in message.text:
                    should_reply = True
            
            # –†–µ–ø–ª–∞–∏
            if self.config["GROUP_REPLY"] and message.reply_to_msg_id:
                reply_msg = await message.get_reply_message()
                if reply_msg.sender_id == me:
                    should_reply = True
        
        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
        if should_reply:
            try:
                response = await self.generate_response(message)
                await message.reply(response)
            except ChatWriteForbiddenError:
                logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ {chat_id}")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: {e}")
