import logging
import random
import asyncio
from datetime import datetime
from .. import loader, utils
from ..inline.types import InlineCall

logger = logging.getLogger(__name__)

try:
    import google.generativeai as genai
except ImportError:
    logger.error("Google Generative AI not installed! Installing...")
    import os
    os.system("pip install -q google-generativeai")
    import google.generativeai as genai

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini AI
GEMINI_API_KEY = "AIzaSyBDB9kaZ-VF3zT_NZO1WoW2YFlxtAHtcTI"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à –∫–ª—é—á
genai.configure(api_key=GEMINI_API_KEY)
model = genai.GenerativeModel("gemini-2.0-flash")

@loader.tds
class AIModule(loader.Module):
    """–ú–æ–¥—É–ª—å –ò–ò —Å —Ä–æ–ª–µ–≤–æ–π –∏–≥—Ä–æ–π –¥–ª—è Hikka Userbot"""
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –≤ –∫–æ–¥–µ
    prompt = (
        "–¢—ã ‚Äî {name}, {gender} –∏–∑ {country}, —Ç–µ–±–µ {age} –ª–µ—Ç, —Ç–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä ‚Äî {trait}. "
        "–°–µ–≥–æ–¥–Ω—è {season}, {weather}, {temperature}¬∞C, {day_cycle}. "
        "–†–µ–∞–≥–∏—Ä—É–π –Ω–∞ '{action}' –≤ —Å—Ç–∏–ª–µ –¥–µ—Ä–∑–∫–æ–π —Ä–æ–∫-–∑–≤–µ–∑–¥—ã, –∏—Å–ø–æ–ª—å–∑—É–π —è—Ä–∫–∏–µ —ç–º–æ—Ü–∏–∏ –∏ —Å–∞—Ä–∫–∞–∑–º!"
    )

    strings = {
        "name": "AI",
        "welcome": "üåü –ü—Ä–∏–≤–µ—Ç, —è –≥–æ—Ç–æ–≤–∞ –∫ –∏–≥—Ä–µ! –•–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Ä—É—á–Ω—É—é –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä? (.setchar –∏–ª–∏ .randchar)",
        "char_set": "‚úÖ –ü–µ—Ä—Å–æ–Ω–∞–∂ –Ω–∞—Å—Ç—Ä–æ–µ–Ω: {emoji} {name} {surname} {patronymic}",
        "char_error": "‚ùå –°–Ω–∞—á–∞–ª–∞ –Ω–∞—Å—Ç—Ä–æ–π –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ (.setchar –∏–ª–∏ .randchar)!",
        "ai_on": "ü§ñ –ò–ò –≤–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!",
        "ai_off": "üõë –ò–ò –≤—ã–∫–ª—é—á–µ–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ.",
        "ask_all_on": "üåê –ò–ò –±—É–¥–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤—Å–µ–º –≤ —á–∞—Ç–µ!",
        "ask_all_off": "üîá –†–µ–∂–∏–º –æ—Ç–≤–µ—Ç–æ–≤ –≤—Å–µ–º –æ—Ç–∫–ª—é—á–µ–Ω.",
        "prompt_set": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!",
        "prompt_reset": "‚úÖ –ü—Ä–æ–º—Ç —Å–±—Ä–æ—à–µ–Ω –∫ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–º—É!",
        "help": (
            "üìñ –ö–æ–º–∞–Ω–¥—ã –º–æ–¥—É–ª—è AI:\n"
            "üîπ .setchar ‚Äî –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Ä—É—á–Ω—É—é\n"
            "üîπ .randchar ‚Äî –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "üîπ .ai <—Ç–µ–∫—Å—Ç> ‚Äî –ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò\n"
            "üîπ .aion ‚Äî –í–∫–ª—é—á–∏—Ç—å –ò–ò –≤ —á–∞—Ç–µ\n"
            "üîπ .aioff ‚Äî –í—ã–∫–ª—é—á–∏—Ç—å –ò–ò –≤ —á–∞—Ç–µ\n"
            "üîπ .askallon ‚Äî –ò–ò –æ—Ç–≤–µ—á–∞–µ—Ç –≤—Å–µ–º –≤ —á–∞—Ç–µ\n"
            "üîπ .askalloff ‚Äî –û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –≤—Å–µ–º\n"
            "üîπ .status ‚Äî –ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞\n"
            "üîπ .setprompt <—Ç–µ–∫—Å—Ç> ‚Äî –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç\n"
            "üîπ .resetprompt ‚Äî –°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç"
        )
    }

    async def client_ready(self, client, db):
        self._client = client
        self.db = db
        self.enabled_chats = self.db.get(self.strings["name"], "enabled_chats", [])
        self.ask_all_chats = self.db.get(self.strings["name"], "ask_all_chats", [])
        self.characters = self.db.get(self.strings["name"], "characters", {})
        self.chat_memory = self.db.get(self.strings["name"], "chat_memory", {})
        self.prompts = self.db.get(self.strings["name"], "prompts", {})  # –•—Ä–∞–Ω–∏–ª–∏—â–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –ø—Ä–æ–º—Ç–æ–≤
        
        self.emojis = [
            "üëß", "üëßüèª", "üëßüèº", "üëßüèΩ", "üëßüèæ", "üëßüèø", "üë©", "üë©üèª", "üë©üèº", "üë©üèΩ", "üë©üèæ", "üë©üèø",
            "üë±‚Äç‚ôÄÔ∏è", "üë±üèª‚Äç‚ôÄÔ∏è", "üë±üèº‚Äç‚ôÄÔ∏è", "üë±üèΩ‚Äç‚ôÄÔ∏è", "üë±üèæ‚Äç‚ôÄÔ∏è", "üë±üèø‚Äç‚ôÄÔ∏è"
        ]
        self.good_traits = [
            "–ü—Ä–æ—Å—Ç–æ–π", "–î—Ä—É–∂–µ–ª—é–±–Ω—ã–π", "–®—É—Ç–ª–∏–≤—ã–π", "–û–∑–æ—Ä–Ω–æ–π", "–ö–æ–∫–µ—Ç–ª–∏–≤—ã–π", "–ß—É–≤—Å—Ç–≤–µ–Ω–Ω—ã–π", "–°–µ–∫—Å—É–∞–ª—å–Ω—ã–π",
            "–ù–∞–∏–≤–Ω—ã–π", "–°–ø–æ–∫–æ–π–Ω—ã–π", "–î–æ–±—Ä—ã–π", "–õ–µ–≥–∫–∏–π", "–ò–≥—Ä–∏–≤—ã–π", "–•–∞—Ä–∏–∑–º–∞—Ç–∏—á–Ω—ã–π", "–ü—Ä–æ–≤–æ–∫–∞—Ü–∏–æ–Ω–Ω—ã–π",
            "–°–æ–±–ª–∞–∑–Ω–∏—Ç–µ–ª—å–Ω—ã–π", "–î–µ—Ä–∑–∫–∏–π", "–ó–∞–±–æ—Ç–ª–∏–≤—ã–π", "–°–æ—á—É–≤—Å—Ç–≤—É—é—â–∏–π", "–ú—è–≥–∫–∏–π", "–©–µ–¥—Ä—ã–π", "–í–µ—Ä–Ω—ã–π",
            "–û–ø—Ç–∏–º–∏—Å—Ç–∏—á–Ω—ã–π", "–¢—ë–ø–ª—ã–π", "–ë–µ—Å–∫–æ—Ä—ã—Å—Ç–Ω—ã–π", "–ó–∞—â–∏—Ç–Ω–∏–∫", "–ü–æ–Ω–∏–º–∞—é—â–∏–π", "–¢–µ—Ä–ø–µ–ª–∏–≤—ã–π", "–ù–µ–∂–Ω—ã–π",
            "–í–µ—Å—ë–ª—ã–π", "–£–≤–∞–∂–∏—Ç–µ–ª—å–Ω—ã–π", "–ë–ª–∞–≥–æ–¥–∞—Ä–Ω—ã–π", "–î—É—à–µ–≤–Ω—ã–π", "–°–º–∏—Ä–µ–Ω–Ω—ã–π", "–ù–∞–¥—ë–∂–Ω—ã–π", "–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—â–∏–π",
            "–ß–µ—Å—Ç–Ω—ã–π", "–°—Ç–µ—Å–Ω–∏—Ç–µ–ª—å–Ω—ã–π"
        ]
        self.evil_traits = [
            "–ü–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã–π", "–¶–∏–Ω–∏—á–Ω—ã–π", "–†–µ–∑–∫–∏–π", "–í—ã—Å–æ–∫–æ–º–µ—Ä–Ω—ã–π", "–•–æ–ª–æ–¥–Ω—ã–π", "–ú—Å—Ç–∏—Ç–µ–ª—å–Ω—ã–π", "–ó–ª–æ–±–Ω—ã–π",
            "–°–∞–¥–∏—Å—Ç–∏—á–Ω—ã–π", "–Ø–¥–æ–≤–∏—Ç—ã–π", "–ë–µ–∑–∂–∞–ª–æ—Å—Ç–Ω—ã–π", "–ü—Ä–∏–¥–∏—Ä—á–∏–≤—ã–π", "–ó–∞–≤–∏—Å—Ç–ª–∏–≤—ã–π", "–£–≥—Ä—é–º—ã–π",
            "–ú–∞–Ω–∏–ø—É–ª—è—Ç–∏–≤–Ω—ã–π", "–õ–∏—Ü–µ–º–µ—Ä–Ω—ã–π", "–°–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π", "–ö–æ–≤–∞—Ä–Ω—ã–π", "–í—Å–ø—ã–ª—å—á–∏–≤—ã–π", "–¢–∏—Ä–∞–Ω",
            "–ü–∞—Ä–∞–Ω–æ–∏–¥–∞–ª—å–Ω—ã–π", "–ñ–µ—Å—Ç–æ–∫–∏–π"
        ]
        self.countries = ["–†–æ—Å—Å–∏—è", "–£–∫—Ä–∞–∏–Ω–∞", "–Ø–ø–æ–Ω–∏—è", "–ë—Ä–∞–∑–∏–ª–∏—è", "–§—Ä–∞–Ω—Ü–∏—è", "–ì–µ—Ä–º–∞–Ω–∏—è", "–°–®–ê", "–ò–Ω–¥–∏—è"]
        self.female_names = ["–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–ú–∞—Ä–∏—è", "–°–æ—Ñ–∏—è", "–ê–Ω–Ω–∞", "–í–∏–∫—Ç–æ—Ä–∏—è", "–î–∞—Ä—å—è"]
        self.male_names = ["–ê–ª–µ–∫—Å–µ–π", "–î–º–∏—Ç—Ä–∏–π", "–ò–≤–∞–Ω", "–ê–Ω–¥—Ä–µ–π", "–°–µ—Ä–≥–µ–π", "–ú–∏—Ö–∞–∏–ª", "–ê—Ä—Ç–µ–º"]
        self.surnames = ["–ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–ö–æ–≤–∞–ª—ë–≤", "–°–º–∏—Ä–Ω–æ–≤", "–ü–æ–ø–æ–≤", "–í–∞—Å–∏–ª—å–µ–≤"]
        self.patronymics = ["–°–µ—Ä–≥–µ–µ–≤–Ω–∞", "–ê–ª–µ–∫—Å–µ–µ–≤–Ω–∞", "–î–º–∏—Ç—Ä–∏–µ–≤–Ω–∞", "–ò–≤–∞–Ω–æ–≤–∏—á", "–ü–µ—Ç—Ä–æ–≤–∏—á", "–°–µ—Ä–≥–µ–µ–≤–∏—á"]
        
        me = await client.get_me()
        await client.send_message(me.id, self.strings["welcome"])

    def get_day_cycle(self):
        current_time = datetime.now()
        hour = current_time.hour
        if 6 <= hour < 9:
            return "–£—Ç—Ä–æ"
        elif 9 <= hour < 14:
            return "–î–µ–Ω—å"
        elif 14 <= hour < 15:
            return "–û–±–µ–¥"
        elif 15 <= hour < 19:
            return "–í–µ—á–µ—Ä"
        elif 19 <= hour < 23:
            return "–ù–æ—á—å"
        else:
            return "–ì–ª—É–±–æ–∫–∞—è –Ω–æ—á—å"

    async def generate_response(self, chat_id, prompt):
        memory = self.chat_memory.get(str(chat_id), [])
        messages = [{"role": msg["role"], "parts": [{"text": msg["content"]}]} for msg in memory]
        messages.append({"role": "user", "parts": [{"text": prompt}]})
        
        try:
            response = await asyncio.to_thread(model.generate_content, messages)
            message_content = response.text
        except Exception as e:
            logger.error(f"Gemini error: {e}")
            return "‚ö†Ô∏è –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞"
        
        self.chat_memory.setdefault(str(chat_id), []).append({"role": "user", "content": prompt})
        self.chat_memory[str(chat_id)].append({"role": "model", "content": message_content})
        self.db.set(self.strings["name"], "chat_memory", self.chat_memory)
        return message_content

    def generate_random_character(self, gender):
        emoji = random.choice(self.emojis) if gender == "female" else random.choice(["üßë", "üßëüèª", "üßëüèº", "üßëüèΩ", "üßëüèæ", "üßëüèø"])
        name = random.choice(self.female_names) if gender == "female" else random.choice(self.male_names)
        surname = random.choice(self.surnames)
        patronymic = random.choice(self.patronymics)
        trait = random.choice(self.good_traits + self.evil_traits if random.random() < 0.9 else self.evil_traits)
        country = random.choice(self.countries)
        age = random.randint(18, 49)
        balance = random.randint(0, 10000)
        return {
            "emoji": emoji,
            "name": name,
            "surname": surname,
            "patronymic": patronymic,
            "trait": trait,
            "country": country,
            "age": age,
            "balance": balance,
            "gender": gender,
            "alive": True
        }

    def get_subtitle(self, character):
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–µ —Å–∞–±—Ç–∏—Ç—Ä—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        good_subtitles = [
            f"{character['name']} –ø–æ—Ç–∏—Ä–∞–µ—Ç —Ä—É–∫–∏ –≤ –ø—Ä–µ–¥–≤–∫—É—à–µ–Ω–∏–∏, –∫–∞–∫ –±—É–¥—Ç–æ –∂–¥–µ—Ç —á–µ–≥–æ-—Ç–æ –æ—á–µ–Ω—å –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ–≥–æ.",
            f"{character['name']} –∑–∞–≥–∞–¥–æ—á–Ω–æ —É–ª—ã–±–∞–µ—Ç—Å—è, –≤ –≥–ª–∞–∑–∞—Ö –∑–∞–≥–æ—Ä–∞–µ—Ç—Å—è –æ–∑–æ—Ä–Ω–æ–π –æ–≥–æ–Ω–µ–∫.",
            f"{character['name']} –ø–æ–ø—Ä–∞–≤–ª—è–µ—Ç –≤–æ–ª–æ—Å—ã –∏ –±—Ä–æ—Å–∞–µ—Ç –∏–≥—Ä–∏–≤—ã–π –≤–∑–≥–ª—è–¥.",
            f"{character['name']} —Ö–∏—Ö–∏–∫–∞–µ—Ç, –ø—Ä–∏–∫—Ä—ã–≤–∞—è —Ä–æ—Ç –ª–∞–¥–æ—à–∫–æ–π."
        ]
        evil_subtitles = [
            f"{character['name']} —Ö–æ–ª–æ–¥–Ω–æ —É—Ö–º—ã–ª—è–µ—Ç—Å—è, —Å–ª–æ–≤–Ω–æ –∑–∞–¥—É–º–∞–ª —á—Ç–æ-—Ç–æ –Ω–µ–¥–æ–±—Ä–æ–µ.",
            f"{character['name']} —Å–∫—Ä–µ—â–∏–≤–∞–µ—Ç —Ä—É–∫–∏, –≥–ª–∞–∑–∞ —Å–≤–µ—Ä–∫–∞—é—Ç –Ω–µ–¥–æ–±—Ä—ã–º —Å–≤–µ—Ç–æ–º.",
            f"{character['name']} —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω–æ –ø—Ä–∏–ø–æ–¥–Ω–∏–º–∞–µ—Ç –±—Ä–æ–≤—å, –±—É–¥—Ç–æ –æ—Ü–µ–Ω–∏–≤–∞—è –≤—Å–µ—Ö –≤–æ–∫—Ä—É–≥.",
            f"{character['name']} —Å—Ç—É—á–∏—Ç –ø–∞–ª—å—Ü–∞–º–∏ –ø–æ —Å—Ç–æ–ª—É, —è–≤–Ω–æ —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω."
        ]
        return random.choice(good_subtitles if character['trait'] in self.good_traits else evil_subtitles)

    async def setcharcmd(self, message):
        """–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –≤—Ä—É—á–Ω—É—é —á–µ—Ä–µ–∑ –∏–Ω–ª–∞–π–Ω-—Ñ–æ—Ä–º—É"""
        chat_id = str(utils.get_chat_id(message))
        await self.inline.form(
            message=message,
            text="–í—ã–±–µ—Ä–∏ –ø–æ–ª –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ —Å–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä:",
            reply_markup=[
                [
                    {
                        "text": "–ñ–µ–Ω—Å–∫–∏–π –ø–æ–ª ‚ôÄÔ∏è", 
                        "callback": self.set_gender, 
                        "args": ("female", chat_id)
                    },
                    {
                        "text": "–ú—É–∂—Å–∫–æ–π –ø–æ–ª ‚ôÇÔ∏è", 
                        "callback": self.set_gender, 
                        "args": ("male", chat_id)
                    }
                ],
                [
                    {
                        "text": "–°–ª—É—á–∞–π–Ω—ã–π –≤—ã–±–æ—Ä", 
                        "callback": self.random_char, 
                        "args": (chat_id,)
                    }
                ]
            ]
        )

    async def set_gender(self, call: InlineCall, gender, chat_id):
        self.characters[chat_id] = {"gender": gender}
        await call.edit(
            "–ü–æ–ª –≤—ã–±—Ä–∞–Ω! –¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã:",
            reply_markup=[
                [
                    {
                        "text": "–°–ª—É—á–∞–π–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", 
                        "callback": self.random_char, 
                        "args": (chat_id,)
                    }
                ],
                [
                    {
                        "text": "–í–≤–µ—Å—Ç–∏ –∏–º—è", 
                        "callback": self.input_name, 
                        "args": (chat_id,)
                    }
                ]
            ]
        )

    async def input_name(self, call: InlineCall, chat_id):
        await call.delete()
        await call.answer("–í–≤–µ–¥–∏ –∏–º—è, —Ñ–∞–º–∏–ª–∏—é, –æ—Ç—á–µ—Å—Ç–≤–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª")
        async with self.conversation(call) as conv:
            response = await conv.get_response()
            parts = response.text.split()
            if len(parts) < 3:
                await response.reply("‚ùå –ù—É–∂–Ω–æ –≤–≤–µ—Å—Ç–∏ –º–∏–Ω–∏–º—É–º 3 —Å–ª–æ–≤–∞ (–ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ)")
                return
            
            self.characters[chat_id].update({
                "name": parts[0],
                "surname": parts[1],
                "patronymic": parts[2],
                "emoji": random.choice(self.emojis) if self.characters[chat_id]["gender"] == "female" else random.choice(["üßë", "üßëüèª", "üßëüèº", "üßëüèΩ", "üßëüèæ", "üßëüèø"]),
                "trait": random.choice(self.good_traits + self.evil_traits if random.random() < 0.9 else self.evil_traits),
                "country": random.choice(self.countries),
                "age": random.randint(18, 49),
                "balance": random.randint(0, 10000),
                "alive": True
            })
            self.db.set(self.strings["name"], "characters", self.characters)
            await response.reply(self.strings["char_set"].format(**self.characters[chat_id]))

    async def random_char(self, call: InlineCall, chat_id):
        gender = self.characters.get(chat_id, {}).get("gender", random.choice(["female", "male"]))
        self.characters[chat_id] = self.generate_random_character(gender)
        self.db.set(self.strings["name"], "characters", self.characters)
        await call.edit(self.strings["char_set"].format(**self.characters[chat_id]))

    async def randcharcmd(self, message):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å —Å–ª—É—á–∞–π–Ω–æ–≥–æ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        chat_id = str(utils.get_chat_id(message))
        gender = random.choice(["female", "male"])
        self.characters[chat_id] = self.generate_random_character(gender)
        self.db.set(self.strings["name"], "characters", self.characters)
        subtitle = self.get_subtitle(self.characters[chat_id])
        await utils.answer(message, (
            f"[{self.characters[chat_id]['emoji']} {self.characters[chat_id]['name']} {self.characters[chat_id]['surname']} {self.characters[chat_id]['patronymic']}]\n\n"
            f"–†–∞–∑ —Ä–µ—à–∏–ª–∞ –¥–æ–≤–µ—Ä–∏—Ç—å—Å—è —Å–ª—É—á–∞—é, –∑–Ω–∞—á–∏—Ç, —Ç–∞–∫ —Ç–æ–º—É –∏ –±—ã—Ç—å! üòâ\n\n"
            f"[–°—É–±—Ç–∏—Ç—Ä—ã: {subtitle}]\n\n"
            f"–°–µ–π—á–∞—Å –ø–æ—Å–º–æ—Ç—Ä–∏–º, –∫–∞–∫–∞—è —è –ø–æ–ª—É—á–∏–ª–∞—Å—å... –ú–º–º, –∞–∂ —Å–∞–º–æ–π –∏–Ω—Ç–µ—Ä–µ—Å–Ω–æ! üòà"
        ))

    async def setpromptcmd(self, message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç"""
        chat_id = str(utils.get_chat_id(message))
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø—Ä–æ–º—Ç–∞!")
            return
        
        self.prompts[chat_id] = args
        self.db.set(self.strings["name"], "prompts", self.prompts)
        await utils.answer(message, self.strings["prompt_set"])

    async def resetpromptcmd(self, message):
        """–°–±—Ä–æ—Å–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id in self.prompts:
            del self.prompts[chat_id]
            self.db.set(self.strings["name"], "prompts", self.prompts)
        await utils.answer(message, self.strings["prompt_reset"])

    async def aicmd(self, message):
        """–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –ò–ò"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id not in self.characters:
            await utils.answer(message, self.strings["char_error"])
            return

        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, "‚ùå –í–≤–µ–¥–∏ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ò–ò!")
            return

        character = self.characters[chat_id]
        if not character.get("alive", False):
            await utils.answer(message, "üíÄ –ü–µ—Ä—Å–æ–Ω–∞–∂ –º—ë—Ä—Ç–≤! –°–æ–∑–¥–∞–π –Ω–æ–≤–æ–≥–æ (.setchar –∏–ª–∏ .randchar).")
            return

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_time = datetime.now()
        weather = random.choice(["–ü–∞—Å–º—É—Ä–Ω–æ", "–î–æ–∂–¥—å", "–°–æ–ª–Ω–µ—á–Ω–æ"])
        temperature = random.randint(-30, 40)
        season = random.choice(["–õ–µ—Ç–æ", "–û—Å–µ–Ω—å", "–ó–∏–º–∞", "–í–µ—Å–Ω–∞"])
        day_cycle = self.get_day_cycle()

        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π prompt
        custom_prompt = self.prompts.get(chat_id)
        if custom_prompt:
            prompt = custom_prompt.format(
                season=season,
                weather=weather,
                temperature=temperature,
                day_cycle=day_cycle,
                emoji=character['emoji'],
                name=character['name'],
                surname=character['surname'],
                patronexplore = True
                patronymic=character['patronymic'],
                trait=character['trait'],
                country=character['country'],
                age=character['age'],
                balance=character['balance'],
                gender='–¥–µ–≤—É—à–∫–∞' if character['gender'] == 'female' else '–ø–∞—Ä–µ–Ω—å',
                action=args
            )
        else:
            prompt = self.prompt.format(
                season=season,
                weather=weather,
                temperature=temperature,
                day_cycle=day_cycle,
                emoji=character['emoji'],
                name=character['name'],
                surname=character['surname'],
                patronymic=character['patronymic'],
                trait=character['trait'],
                country=character['country'],
                age=character['age'],
                balance=character['balance'],
                gender='–¥–µ–≤—É—à–∫–∞' if character['gender'] == 'female' else '–ø–∞—Ä–µ–Ω—å',
                action=args
            )

        response = await self.generate_response(chat_id, prompt)
        subtitle = self.get_subtitle(character)
        await utils.answer(message, (
            f"[{character['emoji']} {character['name']} {character['surname']} {character['patronymic']}]\n\n"
            f"{response}\n\n"
            f"[–°—É–±—Ç–∏—Ç—Ä—ã: {subtitle}]"
        ))

    async def aioncmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –ò–ò –≤ —á–∞—Ç–µ"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id not in self.enabled_chats:
            self.enabled_chats.append(chat_id)
            self.db.set(self.strings["name"], "enabled_chats", self.enabled_chats)
        await utils.answer(message, self.strings["ai_on"])

    async def aioffcmd(self, message):
        """–í—ã–∫–ª—é—á–∏—Ç—å –ò–ò –≤ —á–∞—Ç–µ"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id in self.enabled_chats:
            self.enabled_chats.remove(chat_id)
            self.db.set(self.strings["name"], "enabled_chats", self.enabled_chats)
        if chat_id in self.ask_all_chats:
            self.ask_all_chats.remove(chat_id)
            self.db.set(self.strings["name"], "ask_all_chats", self.ask_all_chats)
        await utils.answer(message, self.strings["ai_off"])

    async def askalloncmd(self, message):
        """–í–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ò–ò –≤—Å–µ–º –≤ —á–∞—Ç–µ"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id in self.enabled_chats:
            if chat_id not in self.ask_all_chats:
                self.ask_all_chats.append(chat_id)
                self.db.set(self.strings["name"], "ask_all_chats", self.ask_all_chats)
            await utils.answer(message, self.strings["ask_all_on"])
        else:
            await utils.answer(message, "‚ùå –°–Ω–∞—á–∞–ª–∞ –≤–∫–ª—é—á–∏ –ò–ò (.aion)")

    async def askalloffcmd(self, message):
        """–û—Ç–∫–ª—é—á–∏—Ç—å –æ—Ç–≤–µ—Ç—ã –ò–ò –≤—Å–µ–º –≤ —á–∞—Ç–µ"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id in self.ask_all_chats:
            self.ask_all_chats.remove(chat_id)
            self.db.set(self.strings["name"], "ask_all_chats", self.ask_all_chats)
        await utils.answer(message, self.strings["ask_all_off"])

    async def statuscmd(self, message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –ø–µ—Ä—Å–æ–Ω–∞–∂–∞"""
        chat_id = str(utils.get_chat_id(message))
        if chat_id not in self.characters:
            await utils.answer(message, self.strings["char_error"])
            return
        character = self.characters[chat_id]
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_time = datetime.now()
        weather = random.choice(["–ü–∞—Å–º—É—Ä–Ω–æ", "–î–æ–∂–¥—å", "–°–æ–ª–Ω–µ—á–Ω–æ"])
        temperature = random.randint(-30, 40)
        season = random.choice(["–õ–µ—Ç–æ", "–û—Å–µ–Ω—å", "–ó–∏–º–∞", "–í–µ—Å–Ω–∞"])
        day_cycle = self.get_day_cycle()
        
        status = (
            f"{character['emoji']} {character['name']} {character['surname']} {character['patronymic']}\n"
            f"–ü–æ–ª: {'‚ôÄÔ∏è' if character['gender'] == 'female' else '‚ôÇÔ∏è'}\n"
            f"–•–∞—Ä–∞–∫—Ç–µ—Ä: {character['trait']}\n"
            f"–°—Ç—Ä–∞–Ω–∞: {character['country']}\n"
            f"–í–æ–∑—Ä–∞—Å—Ç: {character['age']}\n"
            f"–ë–∞–ª–∞–Ω—Å: {character['balance']} —Ä—É–±.\n"
            f"–°–æ—Å—Ç–æ—è–Ω–∏–µ: {'–ñ–∏–≤' if character['alive'] else '–ú—ë—Ä—Ç–≤'}\n"
            f"–°—Ä–µ–¥–∞: {season}, {weather}, {temperature}¬∞C, {day_cycle}"
        )
        await utils.answer(message, status)

    async def watcher(self, message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ"""
        if not message.text or message.text.startswith('.'):
            return
            
        chat_id = str(utils.get_chat_id(message))
        if chat_id not in self.ask_all_chats or chat_id not in self.enabled_chats:
            return
            
        if chat_id not in self.characters:
            return
            
        character = self.characters[chat_id]
        if not character.get("alive", False):
            return
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
        current_time = datetime.now()
        weather = random.choice(["–ü–∞—Å–º—É—Ä–Ω–æ", "–î–æ–∂–¥—å", "–°–æ–ª–Ω–µ—á–Ω–æ"])
        temperature = random.randint(-30, 40)
        season = random.choice(["–õ–µ—Ç–æ", "–û—Å–µ–Ω—å", "–ó–∏–º–∞", "–í–µ—Å–Ω–∞"])
        day_cycle = self.get_day_cycle()
            
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –ø—Ä–æ–º—Ç, –µ—Å–ª–∏ –æ–Ω –µ—Å—Ç—å, –∏–Ω–∞—á–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π prompt
        custom_prompt = self.prompts.get(chat_id)
        if custom_prompt:
            prompt = custom_prompt.format(
                season=season,
                weather=weather,
                temperature=temperature,
                day_cycle=day_cycle,
                emoji=character['emoji'],
                name=character['name'],
                surname=character['surname'],
                patronymic=character['patronymic'],
                trait=character['trait'],
                country=character['country'],
                age=character['age'],
                balance=character['balance'],
                gender='–¥–µ–≤—É—à–∫–∞' if character['gender'] == 'female' else '–ø–∞—Ä–µ–Ω—å',
                action=message.text
            )
        else:
            prompt = self.prompt.format(
                season=season,
                weather=weather,
                temperature=temperature,
                day_cycle=day_cycle,
                emoji=character['emoji'],
                name=character['name'],
                surname=character['surname'],
                patronymic=character['patronymic'],
                trait=character['trait'],
                country=character['country'],
                age=character['age'],
                balance=character['balance'],
                gender='–¥–µ–≤—É—à–∫–∞' if character['gender'] == 'female' else '–ø–∞—Ä–µ–Ω—å',
                action=message.text
            )
        
        response = await self.generate_response(chat_id, prompt)
        subtitle = self.get_subtitle(character)
        await message.reply(
            f"[{character['emoji']} {character['name']} {character['surname']} {character['patronymic']}]\n\n"
            f"{response}\n\n"
            f"[–°—É–±—Ç–∏—Ç—Ä—ã: {subtitle}]"
        )
