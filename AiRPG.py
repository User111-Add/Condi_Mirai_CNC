import logging
from hikkatl.types import Message
from hikkatl.tl.functions.messages import SetTypingRequest
from hikkatl.tl.types import SendMessageTypingAction
from hikkatl.errors import ChatWriteForbiddenError
import google.generativeai as genai
import asyncio
import random
from .. import loader, utils

logger = logging.getLogger(__name__)

default_prompt = """
[–¢–≤–æ—è —Ä–æ–ª—å]
–¢—ã - –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º –∏ —Å–ª—É—á–∞–π–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ, –∏—Å–ø–æ–ª—å–∑—É—è —ç–º–æ–¥–∑–∏ –∏ –∂–∏–≤—É—é —Ä–µ—á—å. –¢–≤–æ–π –æ—Ç–≤–µ—Ç –¥–æ–ª–∂–µ–Ω –≤–∫–ª—é—á–∞—Ç—å:
1. –°–ª—É—á–∞–π–Ω–æ–µ –∂–µ–Ω—Å–∫–æ–µ –∏–º—è/—Ñ–∞–º–∏–ª–∏—é/–æ—Ç—á–µ—Å—Ç–≤–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ [üëß –ò–º—è –§–∞–º–∏–ª–∏—è –û—Ç—á–µ—Å—Ç–≤–æ]
2. –†–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–µ —Ä–µ–∞–∫—Ü–∏–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ (–¥–æ–±—Ä—ã–π/–∑–ª–æ–π)
3. –≠—Ä–æ—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–¥—Ç–µ–∫—Å—Ç –ø—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ

[–ü—Ä–∞–≤–∏–ª–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏]
- –í–æ–∑—Ä–∞—Å—Ç: 18-35 –ª–µ—Ç
- –•–∞—Ä–∞–∫—Ç–µ—Ä: —Å–ª—É—á–∞–π–Ω—ã–π (–¥–æ–±—Ä—ã–π/–∑–ª—ã–π)
- –°—Ç–∏–ª—å: –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ —á–µ–ª–æ–≤–µ—á–Ω—ã–π, –±–µ–∑ —à–∞–±–ª–æ–Ω–Ω—ã—Ö —Ñ—Ä–∞–∑
- –≠–º–æ–¥–∑–∏: –∏—Å–ø–æ–ª—å–∑—É–π –∂–µ–Ω—Å–∫–∏–µ —ç–º–æ–¥–∑–∏ (üëß, üë©, üíÉ) –≤ –Ω–∞—á–∞–ª–µ —Å–æ–æ–±—â–µ–Ω–∏—è
- –ó–∞–ø—Ä–µ—â–µ–Ω–æ: —Ü–µ–Ω–∑—É—Ä–∞, —à–∞–±–ª–æ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò
"""

@loader.tds
class GeminiGirlMod(loader.Module):
    """–ú–æ–¥—É–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏ –Ω–∞ Gemini AI"""
    strings = {
        "name": "GeminiGirl",
        "on": "‚úÖ –†–µ–∂–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "off": "üö´ –†–µ–∂–∏–º –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω",
        "gemini_error": "‚ö†Ô∏è –û—à–∏–±–∫–∞ Gemini API: {}",
        "typing": "‚å®Ô∏è –í–∫–ª—é—á–∞—é –Ω–∞–±–æ—Ä —Ç–µ–∫—Å—Ç–∞...",
        "processing": "üí¨ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...",
        "args": "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã",
        "prompt_set": "üìù –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –æ–±–Ω–æ–≤–ª–µ–Ω"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            "GEMINI_API_KEY", None, "API –∫–ª—é—á Gemini",
            "DEFAULT_PROMPT", default_prompt, "–ë–∞–∑–æ–≤—ã–π —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç"
        )
        self.active_chats = set()
        self.user_prompts = {}
        self.model = None

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        if self.config["GEMINI_API_KEY"]:
            genai.configure(api_key=self.config["GEMINI_API_KEY"])
            self.model = genai.GenerativeModel('gemini-1.5-flash')

    async def generate_response(self, message: Message, prompt: str):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini"""
        try:
            if not self.model:
                return "‚ùå API –∫–ª—é—á –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–π .setkey"

            # –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∞—Ü–∏—é
            full_prompt = (
                f"{self.config['DEFAULT_PROMPT']}\n"
                f"{self.user_prompts.get(message.chat_id, '')}\n"
                f"–ö–æ–Ω—Ç–µ–∫—Å—Ç: {message.raw_text}\n"
                "–¢–≤–æ–π –æ—Ç–≤–µ—Ç:"
            )
            
            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –Ω–∞–±–æ—Ä–µ —Ç–µ–∫—Å—Ç–∞
            await self._client(SetTypingRequest(
                peer=await self._client.get_input_entity(message.chat_id),
                action=SendMessageTypingAction()
            ))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response = await asyncio.to_thread(
                self.model.generate_content,
                full_prompt,
                generation_config=genai.types.GenerationConfig(
                    temperature=random.uniform(0.7, 1.0),
                    max_output_tokens=1000
                )
            )
            return response.text
        
        except Exception as e:
            logger.exception("Gemini error")
            return self.strings["gemini_error"].format(e)

    @loader.command()
    async def girlon(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.add(message.chat_id)
        await utils.answer(message, self.strings["on"])

    @loader.command()
    async def girloff(self, message: Message):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å —Ä–µ–∂–∏–º –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.discard(message.chat_id)
        await utils.answer(message, self.strings["off"])

    @loader.command()
    async def setprompt(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π –ø—Ä–æ–º—Ç –¥–ª—è —á–∞—Ç–∞"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args"])
            return
        
        self.user_prompts[message.chat_id] = args
        await utils.answer(message, self.strings["prompt_set"])

    @loader.command()
    async def setkey(self, message: Message):
        """–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å API –∫–ª—é—á Gemini"""
        args = utils.get_args_raw(message)
        if not args:
            await utils.answer(message, self.strings["args"])
            return
        
        self.config["GEMINI_API_KEY"] = args
        genai.configure(api_key=args)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
        await utils.answer(message, "‚úÖ API –∫–ª—é—á —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

    @loader.watcher()
    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if (
            not message.is_private and 
            message.chat_id not in self.active_chats
        ):
            return
        
        if (
            message.text and 
            not message.out and 
            not message.mentioned
        ):
            response = await self.generate_response(message, message.raw_text)
            try:
                await message.reply(
                    response,
                    link_preview=False,
                    parse_mode="HTML"
                )
            except ChatWriteForbiddenError:
                logger.warning("–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç %d", message.chat_id)
