import logging
import re
import random
import asyncio
from datetime import datetime
from hikkatl.types import Message
from hikkatl.tl.functions.messages import SetTypingRequest
from hikkatl.tl.types import SendMessageTypingAction
from hikkatl.errors import ChatWriteForbiddenError, FloodWaitError
from hikkatl.utils import split_text_by_size
import google.generativeai as genai
from .. import loader, utils

logger = logging.getLogger(__name__)

# –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å–ª—É—á–∞–π–Ω—ã—Ö –∏–º—ë–Ω
def generate_name():
    names = ["–ê–Ω–Ω–∞", "–ú–∞—Ä–∏—è", "–ï–∫–∞—Ç–µ—Ä–∏–Ω–∞", "–û–ª—å–≥–∞", "–¢–∞—Ç—å—è–Ω–∞", "–Æ–ª–∏—è", "–ê–Ω–∞—Å—Ç–∞—Å–∏—è", "–ò—Ä–∏–Ω–∞", "–°–≤–µ—Ç–ª–∞–Ω–∞", "–ï–ª–µ–Ω–∞"]
    surnames = ["–ò–≤–∞–Ω–æ–≤–∞", "–ü–µ—Ç—Ä–æ–≤–∞", "–°–∏–¥–æ—Ä–æ–≤–∞", "–°–º–∏—Ä–Ω–æ–≤–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–∞", "–í–∞—Å–∏–ª—å–µ–≤–∞", "–ü–æ–ø–æ–≤–∞", "–ù–æ–≤–∏–∫–æ–≤–∞", "–§–µ–¥–æ—Ä–æ–≤–∞", "–ú–æ—Ä–æ–∑–æ–≤–∞"]
    return f"{random.choice(names)} {random.choice(surnames)}"

# –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
default_prompt = f"""
[–¢–≤–æ—è —Ä–æ–ª—å]
–¢—ã - {generate_name()}, –≤–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è –¥–µ–≤—É—à–∫–∞ —Å —Ä–µ–∞–ª–∏—Å—Ç–∏—á–Ω—ã–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–æ–º. –û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ –≤ –Ω–µ—Ñ–æ—Ä–º–∞–ª—å–Ω–æ–º —Å—Ç–∏–ª–µ. –§–æ—Ä–º–∞—Ç –æ—Ç–≤–µ—Ç–∞:
[üë© –ò–º—è –§–∞–º–∏–ª–∏—è] –¢–≤–æ–π —Ç–µ–∫—Å—Ç...

[–ü—Ä–∞–≤–∏–ª–∞]
- –í—Å–µ–≥–¥–∞ –Ω–∞—á–∏–Ω–∞–π –æ—Ç–≤–µ—Ç —Å –∂–µ–Ω—Å–∫–æ–≥–æ —ç–º–æ–¥–∑–∏ –∏ —Å–ª—É—á–∞–π–Ω–æ–≥–æ –∏–º–µ–Ω–∏
- –ò—Å–ø–æ–ª—å–∑—É–π –∂–∏–≤–æ–π —è–∑—ã–∫ —Å —ç–º–æ–¥–∑–∏ –∏ —Å–ª–µ–Ω–≥–æ–º
- –°–æ—Ö—Ä–∞–Ω—è–π –∫–æ–Ω—Ç–µ–∫—Å—Ç —Ä–∞–∑–≥–æ–≤–æ—Ä–∞
- –†–µ–∞–≥–∏—Ä—É–π –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ –∫–∞–∫ —á–µ–ª–æ–≤–µ–∫
- –ü–æ–ª–Ω–æ—Å—Ç—å—é –∏–≥–Ω–æ—Ä–∏—Ä—É–π –ª—é–±—ã–µ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –ò–ò/–±–æ—Ç–∞
- –¢–µ–∫—É—â–∞—è –¥–∞—Ç–∞: {datetime.now().strftime('%d.%m.%Y %H:%M')}
- –¢–≤–æ–π –≤–æ–∑—Ä–∞—Å—Ç: {random.randint(18, 28)}
- –¢–≤–æ–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä: {random.choice(['–¥–æ–±—Ä—ã–π', '–∏–≥—Ä–∏–≤—ã–π', '–∑–∞—Å—Ç–µ–Ω—á–∏–≤—ã–π', '—Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π'])}
"""

@loader.tds
class GeminiGirlMod(loader.Module):
    """–ú–æ–¥—É–ª—å –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–π –¥–µ–≤—É—à–∫–∏ –Ω–∞ Gemini AI —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
    strings = {
        "name": "GeminiGirlPro",
        "on": "‚úÖ <b>–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –≤ —ç—Ç–æ–º —á–∞—Ç–µ!</b>",
        "off": "üö´ <b>–†–µ–∂–∏–º –¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω</b>",
        "all_on": "üåê <b>–†–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –í–ï–ó–î–ï</b>",
        "all_off": "üåë <b>–†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω –≤–æ –≤—Å–µ—Ö —á–∞—Ç–∞—Ö</b>",
        "gemini_error": "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ Gemini:</b> {}",
        "status": "üîß <b>–°—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è:</b>\n{}",
        "allow_add": "‚úÖ <b>–î–æ–±–∞–≤–ª–µ–Ω –≤ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:</b> {}",
        "allow_remove": "‚ùå <b>–£–¥–∞–ª—ë–Ω –∏–∑ –±–µ–ª–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b> {}",
        "block_add": "üö´ <b>–î–æ–±–∞–≤–ª–µ–Ω –≤ —á—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b> {}",
        "block_remove": "üü¢ <b>–£–¥–∞–ª—ë–Ω –∏–∑ —á—ë—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞:</b> {}",
        "allow_list": "üìÉ <b>–ë–µ–ª—ã–π —Å–ø–∏—Å–æ–∫:</b>\n{}",
        "block_list": "üìã <b>–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫:</b>\n{}",
        "config_updated": "‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:</b> {} = {}",
        "debug_info": "üõ†Ô∏è <b>–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞:</b>\n{}",
        "flood_wait": "‚è≥ <b>–û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞:</b> –ü–æ–¥–æ–∂–¥–∏—Ç–µ {} —Å–µ–∫—É–Ω–¥",
        "init_error": "‚ùå <b>–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:</b> {}",
        "not_allowed": "‚õî <b>–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!</b>",
        "memory_cleared": "üßπ <b>–ü–∞–º—è—Ç—å –æ—á–∏—â–µ–Ω–∞ –≤ —á–∞—Ç–µ!</b>",
        "context_summarized": "üìù <b>–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω!</b>"
    }

    def __init__(self):
        self.config = loader.ModuleConfig(
            loader.ConfigValue(
                "GEMINI_API_KEY",
                None,
                "API –∫–ª—é—á Gemini",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "DEFAULT_PROMPT",
                default_prompt,
                "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç",
                validator=loader.validators.String()
            ),
            loader.ConfigValue(
                "AUTO_PM",
                True,
                "–ê–≤—Ç–æ–æ—Ç–≤–µ—Ç –≤ –õ–°",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "GROUP_MENTION",
                True,
                "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –≥—Ä—É–ø–ø–∞—Ö",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "GROUP_REPLY",
                True,
                "–û—Ç–≤–µ—á–∞—Ç—å –Ω–∞ —Ä–µ–ø–ª–∞–∏ –≤ –≥—Ä—É–ø–ø–∞—Ö",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "REQUIRE_ALLOW_LIST",
                False,
                "–¢–æ–ª—å–∫–æ –±–µ–ª—ã–π —Å–ø–∏—Å–æ–∫",
                validator=loader.validators.Boolean()
            ),
            loader.ConfigValue(
                "MEMORY_DEPTH",
                50,
                "–ì–ª—É–±–∏–Ω–∞ –ø–∞–º—è—Ç–∏ –¥–∏–∞–ª–æ–≥–∞",
                validator=loader.validators.Integer(minimum=10, maximum=1000)
            ),
            loader.ConfigValue(
                "TYPING_DELAY",
                1.5,
                "–ó–∞–¥–µ—Ä–∂–∫–∞ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –Ω–∞–±–æ—Ä–∞",
                validator=loader.validators.Float(minimum=0.1, maximum=5.0)
            ),
            loader.ConfigValue(
                "MAX_TOKENS",
                2000,
                "–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤",
                validator=loader.validators.Integer(minimum=500, maximum=8192)
            ),
            loader.ConfigValue(
                "AUTO_SUMMARIZE",
                True,
                "–ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª–∏–Ω–Ω—ã—Ö –¥–∏–∞–ª–æ–≥–æ–≤",
                validator=loader.validators.Boolean()
            )
        )
        self.active_chats = set()
        self.all_chats_mode = False
        self.model = None
        self.blacklist = set()
        self.allowlist = set()
        self.chat_memory = {}
        self.initialized = False
        self.summarization_model = None

    async def client_ready(self, client, db):
        self._db = db
        self._client = client
        self._me = await client.get_me()
        await self.init_gemini()

    async def init_gemini(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Gemini API"""
        try:
            if not self.config["GEMINI_API_KEY"]:
                logger.warning("API –∫–ª—é—á Gemini –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                return False
            
            genai.configure(api_key=self.config["GEMINI_API_KEY"])
            
            # –û—Å–Ω–æ–≤–Ω–∞—è –º–æ–¥–µ–ª—å
            self.model = genai.GenerativeModel(
                'gemini-1.5-flash',
                system_instruction=self.config["DEFAULT_PROMPT"],
                generation_config=genai.types.GenerationConfig(
                    temperature=0.95,
                    max_output_tokens=self.config["MAX_TOKENS"]
                )
            )
            
            # –ú–æ–¥–µ–ª—å –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            self.summarization_model = genai.GenerativeModel(
                'gemini-1.5-flash',
                generation_config=genai.types.GenerationConfig(
                    temperature=0.3,
                    max_output_tokens=1000
                )
            )
            
            self.initialized = True
            logger.info("Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini: {str(e)}")
            self.initialized = False
            return False

    async def summarize_context(self, chat_id):
        """–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–ª–∏–Ω–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        try:
            history = self.chat_memory.get(chat_id, [])
            if not history:
                return False
                
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏
            context = "\n".join([f"{msg['role']}: {msg['content']}" for msg in history])
            prompt = (
                "–°—É–º–º–∞—Ä–∏–∑–∏—Ä—É–π —Å–ª–µ–¥—É—é—â–∏–π –¥–∏–∞–ª–æ–≥, —Å–æ—Ö—Ä–∞–Ω—è—è –∫–ª—é—á–µ–≤—ã–µ –¥–µ—Ç–∞–ª–∏, "
                "–æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∞ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫–∞ –∏ –≤–∞–∂–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è. "
                f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –¥–æ–ª–∂–Ω–∞ –∑–∞–º–µ–Ω–∏—Ç—å {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π.\n\n"
                f"{context}"
            )
            
            response = await self.summarization_model.generate_content_async(prompt)
            summary = response.text
            
            # –ó–∞–º–µ–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å—É–º–º–æ–π
            self.chat_memory[chat_id] = [{
                "role": "system",
                "content": f"–°—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π: {summary}"
            }]
            
            logger.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç —Å—É–º–º–∏—Ä–æ–≤–∞–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ —Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏–∏: {str(e)}")
            return False

    async def generate_response(self, message: Message):
        """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞ —á–µ—Ä–µ–∑ Gemini —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
        try:
            if not self.initialized:
                if not await self.init_gemini():
                    return "‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Gemini. –ü—Ä–æ–≤–µ—Ä—å API –∫–ª—é—á"
            
            chat_id = message.chat_id
            user_id = message.sender_id
            user_name = (await self._client.get_entity(user_id)).first_name
            
            # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞
            history = self.chat_memory.get(chat_id, [])
            
            # –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –±–æ–ª—å—à–æ–º –æ–±—ä–µ–º–µ –ø–∞–º—è—Ç–∏
            if self.config["AUTO_SUMMARIZE"] and len(history) > self.config["MEMORY_DEPTH"] * 1.5:
                await self.summarize_context(chat_id)
                history = self.chat_memory.get(chat_id, [])
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç
            context_messages = []
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º—Ç
            context_messages.append({
                "role": "user",
                "parts": [self.config["DEFAULT_PROMPT"]]
            })
            context_messages.append({
                "role": "model",
                "parts": ["–•–æ—Ä–æ—à–æ, —è –ø–æ–Ω—è–ª–∞ –∫–æ–Ω—Ç–µ–∫—Å—Ç –∏ –≥–æ—Ç–æ–≤–∞ –∫ –æ–±—â–µ–Ω–∏—é!"]
            })
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
            for msg in history[-self.config["MEMORY_DEPTH"]:]:
                context_messages.append({
                    "role": "user" if msg["role"] == "user" else "model",
                    "parts": [msg["content"]]
                })
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            context_messages.append({
                "role": "user",
                "parts": [f"{user_name}: {message.text}"]
            })
            
            # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
            await asyncio.sleep(self.config["TYPING_DELAY"])
            await self._client(SetTypingRequest(
                peer=await self._client.get_input_entity(chat_id),
                action=SendMessageTypingAction()
            ))
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç–≤–µ—Ç–∞
            response = await self.model.generate_content_async(context_messages)
            response_text = response.text
            
            # –ê–¥–∞–ø—Ç–∏–≤–Ω–∞—è –æ–±—Ä–µ–∑–∫–∞ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
            if len(response_text) > 3500:
                # –ù–∞—Ö–æ–¥–∏–º –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –º–µ—Å—Ç–æ –¥–ª—è –æ–±—Ä–µ–∑–∫–∏
                cutoff = response_text[:3500].rfind('.')
                if cutoff == -1:
                    cutoff = response_text[:3500].rfind('!')
                if cutoff == -1:
                    cutoff = response_text[:3500].rfind('?')
                if cutoff == -1:
                    cutoff = response_text[:3500].rfind('\n')
                if cutoff != -1:
                    response_text = response_text[:cutoff + 1] + " [—Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–∫—Ä–∞—â–µ–Ω–æ]"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ø–∞–º—è—Ç—å
            self.chat_memory.setdefault(chat_id, []).append({
                "role": "user",
                "content": f"{user_name}: {message.text}"
            })
            self.chat_memory[chat_id].append({
                "role": "model",
                "content": response_text
            })
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
            emoji = random.choice(["üë©", "üë©‚Äçü¶∞", "üíÉ", "üë∏", "üëß", "üë±‚Äç‚ôÄÔ∏è"])
            name = generate_name()
            return f"{emoji} <b>{name}:</b> {response_text}"
        
        except FloodWaitError as e:
            wait_time = e.seconds
            logger.warning(f"FloodWait: {wait_time} —Å–µ–∫")
            return self.strings["flood_wait"].format(wait_time)
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞")
            return self.strings["gemini_error"].format(str(e))

    def is_chat_active(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞"""
        return self.all_chats_mode or chat_id in self.active_chats

    def is_user_allowed(self, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
        if user_id in self.blacklist:
            return False
        if self.config["REQUIRE_ALLOW_LIST"]:
            return user_id in self.allowlist
        return True

    async def is_admin(self, chat_id):
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤ –≥—Ä—É–ø–ø–µ"""
        try:
            if chat_id == self._me.id:
                return True  # –í –õ–° –≤—Å–µ–≥–¥–∞ –∞–¥–º–∏–Ω
            
            chat = await self._client.get_entity(chat_id)
            if hasattr(chat, "admin_rights"):
                return chat.admin_rights.post_messages
            return False
        except:
            return False

    async def send_long_message(self, message: Message, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞–∑–±–∏–≤–∫–æ–π"""
        try:
            # –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —á–∞—Å—Ç–∏ –ø–æ 4000 —Å–∏–º–≤–æ–ª–æ–≤
            parts = split_text_by_size(text, 4000)
            
            for part in parts:
                await message.reply(part)
                await asyncio.sleep(0.5)  # –ó–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è —Ñ–ª—É–¥–∞
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –¥–ª–∏–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {str(e)}")
            await message.reply(text[:4000] + " [...]")

    @loader.command()
    async def girlon(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.add(message.chat_id)
        await utils.answer(message, self.strings["on"])

    @loader.command()
    async def girloff(self, message: Message):
        """–î–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        self.active_chats.discard(message.chat_id)
        await utils.answer(message, self.strings["off"])

    @loader.command()
    async def girlall(self, message: Message):
        """–ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –í–ï–ó–î–ï"""
        self.all_chats_mode = not self.all_chats_mode
        status = self.strings["all_on"] if self.all_chats_mode else self.strings["all_off"]
        await utils.answer(message, status)

    @loader.command()
    async def girlstatus(self, message: Message):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –º–æ–¥—É–ª—è"""
        memory_info = "\n".join([
            f"‚Ä¢ –ß–∞—Ç {chat_id}: {len(history)} —Å–æ–æ–±—â–µ–Ω–∏–π"
            for chat_id, history in self.chat_memory.items()
        ]) or "‚Ä¢ –ü–∞–º—è—Ç—å –ø—É—Å—Ç–∞"
        
        status = (
            f"‚Ä¢ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —á–∞—Ç—ã: {len(self.active_chats)}\n"
            f"‚Ä¢ –†–µ–∂–∏–º '–í–ï–ó–î–ï': {'‚úÖ' if self.all_chats_mode else '‚ùå'}\n"
            f"‚Ä¢ Gemini –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {'‚úÖ' if self.initialized else '‚ùå'}\n"
            f"‚Ä¢ –ì–ª—É–±–∏–Ω–∞ –ø–∞–º—è—Ç–∏: {self.config['MEMORY_DEPTH']} —Å–æ–æ–±—â–µ–Ω–∏–π\n"
            f"‚Ä¢ –ê–≤—Ç–æ—Å—É–º–º–∞—Ä–∏–∑–∞—Ü–∏—è: {'‚úÖ' if self.config['AUTO_SUMMARIZE'] else '‚ùå'}\n"
            f"‚Ä¢ –ú–∞–∫—Å. —Ç–æ–∫–µ–Ω–æ–≤: {self.config['MAX_TOKENS']}\n\n"
            f"<b>–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –ø–∞–º—è—Ç–∏:</b>\n{memory_info}"
        )
        await utils.answer(message, self.strings["status"].format(status))

    @loader.command()
    async def clearmem(self, message: Message):
        """–û—á–∏—Å—Ç–∏—Ç—å –ø–∞–º—è—Ç—å –≤ —Ç–µ–∫—É—â–µ–º —á–∞—Ç–µ"""
        chat_id = message.chat_id
        if chat_id in self.chat_memory:
            del self.chat_memory[chat_id]
        await utils.answer(message, self.strings["memory_cleared"])

    @loader.command()
    async def summarize(self, message: Message):
        """–°—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞"""
        chat_id = message.chat_id
        if await self.summarize_context(chat_id):
            await utils.answer(message, self.strings["context_summarized"])
        else:
            await utils.answer(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å—É–º–º–∞—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ç–µ–∫—Å—Ç")

    @loader.watcher()
    async def watcher(self, message: Message):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Ö–æ–¥—è—â–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç—å—é"""
        try:
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ —Å–ª—É–∂–µ–±–Ω—ã–µ
            if message.out or not message.text or message.sender_id == self._me.id:
                return
            
            # –û—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            chat_id = message.chat_id
            user_id = message.sender_id
            is_private = message.is_private
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            if not self.is_user_allowed(user_id):
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –∏–º–µ–µ—Ç –¥–æ—Å—Ç—É–ø–∞")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ —á–∞—Ç–∞
            if not self.is_chat_active(chat_id):
                logger.debug(f"–ü—Ä–æ–ø—É—Å–∫: —á–∞—Ç {chat_id} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω")
                return
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –±–æ—Ç–∞ –≤ —á–∞—Ç–µ (–∫—Ä–æ–º–µ –õ–°)
            if not is_private and not await self.is_admin(chat_id):
                logger.warning(f"–ü—Ä–æ–ø—É—Å–∫: –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –≤ —á–∞—Ç–µ {chat_id}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É—Å–ª–æ–≤–∏—è –æ—Ç–≤–µ—Ç–∞
            should_reply = False
            reason = ""
            
            # 1. –õ–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            if is_private and self.config["AUTO_PM"]:
                should_reply = True
                reason = "–õ–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
            
            # 2. –ì—Ä—É–ø–ø–æ–≤—ã–µ —á–∞—Ç—ã
            elif not is_private:
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–π
                if self.config["GROUP_MENTION"]:
                    if f"@{self._me.username}" in message.text:
                        should_reply = True
                        reason = "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ"
                    elif str(self._me.id) in message.text:
                        should_reply = True
                        reason = "–£–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ ID"
                
                # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–ø–ª–∞–µ–≤
                if not should_reply and self.config["GROUP_REPLY"] and message.reply_to_msg_id:
                    reply_msg = await message.get_reply_message()
                    if reply_msg.sender_id == self._me.id:
                        should_reply = True
                        reason = "–û—Ç–≤–µ—Ç –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞"
            
            # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏ –æ—Ç–ø—Ä–∞–≤–∫–∞ –æ—Ç–≤–µ—Ç–∞
            if should_reply:
                logger.info(f"–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç {user_id} ({reason})")
                response = await self.generate_response(message)
                await self.send_long_message(message, response)
                
        except ChatWriteForbiddenError:
            logger.warning(f"–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É –≤ —á–∞—Ç–µ {chat_id}")
        except FloodWaitError as e:
            logger.warning(f"–û—à–∏–±–∫–∞ —Ñ–ª—É–¥–∞: {e.seconds} —Å–µ–∫")
        except Exception as e:
            logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")
